Backend design

FrontEnd
*** Navigator -> ReactJS -> Redux
*** Android app -> ReactNative -> Redux
*** Iphone app -> ReactNative -> Redux

--------------------
Backend

*** AWS Lambda
Microservices for encapsulated database access, authenticate user and create log access

API
---
createStore() => returns {
		storeToken: store.token, 
		sessionToken: session.token
	}
	PROCESS
	1. insert DB store
	2. insert DB store session with type AdminAnnonymous
	3. call log function
	NOTE: this function allow create store and products without email or sign up for UX and for show functionality and demos
---
getStore(storeToken, sessionToken, location="") => returns {
	complete redux object
}
	MAIN function, requested at software start, all frontend will build it base on this
	PROCESS
	1. check storeToken exists DB store
	2. search DB product, filtered by storeId
	3. search DB category filtered by storeId
	4. search DB config filtered by storeId
	5. if sessionToken exists and get DB userId
	5.1 search DB cart filtered by storeId and sessionToken
	5.2 search DB chat filtered by storeId and sessionToken
	5.3 search DB order filtered by storeId and sessionToken
	6. if sessionToken does not exists create a new session for visitor
	7. if userId has rol seller or Admin
	7.1 search DB order filtered by storeId and status not canceled and not completed
	7.2 search DB chat filtered by storeId and conversation without answer
	7.3 calculate config.statistis count visitor, count orders, count chat, all filtered by store
	8. if userId has rol Admin
	8.1 mark config with admin flag
	9. if userId has rol visitor, omit config.chat_quick_answer
	10. search DB config filtered by location or storeName
---
updateStore(storeToken, sessionToken. action) => returns {
	result:OK,
	error:""
}
	NOTE: the param action will be the same from redux actions
	PROCESS
	1. check storeToken exists on DB store
	2. check sessionToken exists on DB session
	3. modify database like reducers
	4. call log function
---
createUser(email, hashpass, rol="Visitor", storeToken, sessionToken) =>returns {
		session:session.id
	}
	sign up process for admin or for visitors
	PROCESS
	1. check email user dont exists
	2. check storeToken exists
	3. check sessionToken exists and rol has right to create new user
	4. insert DB user
	5. call login process
	6. call log function
---
login(email, hasspass, sessionOld = "") => returns {
		session:session.id
	}
	PROCESS
	1. if oldSession exists in DB session.id generate new session and replace DB session.timestamp
	2. check DB user.email exists
	3. compare hashpass
	4.1 check DB session if already exists
	4.2 insert DB session
	5. call log function
---
logout(sessionToken)
	for visitor or registered user end the session
	PROCESS
	1. delete DB session filtered by sessionToken
---
uploadFile(storeToken, sessionToken, filecontent)=>returns {
	filetoken
}
	PROCESS
	1. compress file on frontend
	2. check storeToken exists on DB store
	3. check sessionToken exists on DB session
	4. create a token for identify the file
	5. save filecontent on DB file
---
getFile(storeToken)=>{
	filetoken
}
	PROCESS
	1. check storeToken exists on DB store
	2. get product.img.token of store
	3. download multiples files of store until 5mb
	4. uncompress file on frontend
---
maintenanceDB()
	maintenance process every 7 days, internal not api
	PROCESS
	1. delete DB session with session.timestamp > 7 days and not activity on DB log
	2. delete store create without associated DB user and 30 days of inactivy on DB log
	3. backup and delete store with more than 90 days of inactivy check DB log

*** Websocket - Live notifications
navigator javascript will create wss connections for send and receive live notifications
---
chat(chatObject, sessionToken)
	after every message
	NOTIFY
	1. if chat.request send to all sellers or admin
	if not an admin is not connected send email to admin
	2. if not chat.request send to the user
	if user is not connected send email to user
---
order(orderObject, sessionToken)
	after every changed on order
	NOTIFY
	1. send to all sellers or admin
	if order is generated for user and not an admin is not connected
	send email to admin
	2. send to the user
	if status is completed or cancelled and user is not connected send email to user
---
visitorNavigate(navigate,sessionToken)
	NOTIFY
	1. if sellers or admin are connected send info about visitor navigation
---
other api functions
for network speed websocket vs https receive all api functions and forward to aws lambda


*** MongoDB Atlas
collections with same redux JSON structure (see /store/example.json)  plus storeId for separate info
- product
- category
- config
- cart (plus sessionToken)
- order (plus sessionToken)
- chat (plus sessionToken)
- log

access control
- store  // list stores
	{
		id
		token
		url
		timestamp	
	}
- user // list user
	{
		email
		pass	// hash sha512
		rol		// A => Admin, S => Seller or V => Visitor 
		storeId
		timestamp
		lastlogin
	}
- session // login, logout control
	{
		token
		storeId
		type	// VA => VisitorAdmin, V => VisitorAnnonymous, AL => AdminLogged, VL => VisitorLogged
		userId
		timestamp
		navigate
		chatTyping
	}